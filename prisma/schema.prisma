generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  name          String
  email         String        @unique
  password      String
  role          Role          @default(USER)
  status        UserStatus    @default(ACTIVE)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  supportTickets SupportTicket[]
  lastLoginAt   DateTime?
  jobAnalyses   JobAnalysis[]
  subscriptions Subscription[]
  rateLimits    RateLimit[]
  progress      Progress[]
  resumeAnalyses ResumeAnalysis[]
  motivationLetters MotivationLetter[]
}

enum Role {
  USER
  ADMIN
}

enum UserStatus {
  ACTIVE
  INACTIVE
}

model JobAnalysis {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  linkedinUrl    String
  jobDescription String   @db.Text
  analysis       Json
  compatibility  Int
  createdAt      DateTime @default(now())
}

model ResumeAnalysis {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  resumeText  String   @db.Text
  analysis    Json
  score       Int
  createdAt   DateTime @default(now())
}

model MotivationLetter {
  id             String   @id @default(cuid())
  userId         String
  user           User     @relation(fields: [userId], references: [id])
  jobDescription String   @db.Text
  letterContent  String   @db.Text
  analysis       Json
  score          Int
  createdAt      DateTime @default(now())
}

model RateLimit {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
}

model Subscription {
  id        String            @id @default(cuid())
  userId    String
  user      User             @relation(fields: [userId], references: [id])
  planType  SubscriptionPlan
  status    SubStatus        @default(ACTIVE)
  price     Float
  startDate DateTime         @default(now())
  endDate   DateTime?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
}

enum SubscriptionPlan {
  STARTER
  PROFESSIONAL
  ENTERPRISE
}

enum SubStatus {
  ACTIVE
  CANCELLED
  EXPIRED
}

model Progress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  tutorialId  String
  percentage  Int      @default(0)
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([userId, tutorialId])
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String   @db.Text
  status      TicketStatus @default(OPEN)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    SupportMessage[]
}

model SupportMessage {
  id          String   @id @default(cuid())
  ticketId    String
  ticket      SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  content     String   @db.Text
  isStaff     Boolean  @default(false)
  createdAt   DateTime @default(now())
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  CLOSED
}

model CommunityLink {
  id          String   @id @default(cuid())
  title       String
  description String
  type        String
  url         String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
